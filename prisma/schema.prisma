generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  firebaseUid      String          @unique
  email            String          @unique
  name             String
  phone            String?
  phoneVerified    Boolean         @default(false)
  profileCompleted Boolean         @default(false)
  isSeller         Boolean         @default(false)

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  addresses        Address[]
  sellerProfile    SellerProfile?
  cart             Cart?
  orders           Order[]         @relation("UserOrders")
  artistOrders     Order[]         @relation("ArtistOrders")

  @@index([firebaseUid])
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  type         String // "DELIVERY" or "PICKUP"
  pincode      String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  country      String    @default("India")
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])
  sellerProfile SellerProfile?

  @@unique([userId, type])
  @@index([userId])
}

model SellerProfile {
  id               String    @id @default(uuid())
  userId           String    @unique
  bio              String?
  profileImage     String?
  portfolioImages  String[]  // array of image URLs
  pickupAddressId  String?   @unique
  doesCustomArt    Boolean   @default(false)
  customArtPricing Json?     // Will store pricing for different sizes with base price and per-person price
  materialOptions  Json?     // Will store material options with size-specific costs: { name: string, costs: { A1: number, A2: number, A4: number } }

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
  pickupAddress    Address?  @relation(fields: [pickupAddressId], references: [id])
  products         Product[]
  categories       Category[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
  sellers     SellerProfile[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  isAvailable Boolean     @default(true)
  quantity    Int         @default(1)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  seller      SellerProfile @relation(fields: [sellerId], references: [id])
  sellerId    String
  categories  Category[]
  cartItems   CartItem[]
  orders      Order[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

// --- Added for Orders ---
model Order {
  id              String      @id @default(uuid())
  type            OrderType

  userId          String
  user            User        @relation("UserOrders", fields: [userId], references: [id])

  artistId        String
  artist          User        @relation("ArtistOrders", fields: [artistId], references: [id])

  // For normal orders
  productId       String?
  product         Product?    @relation(fields: [productId], references: [id])

  // For custom orders
  referenceImage  String?
  description     String?
  paperSize       String?
  paperType       String?
  numPeople       Int?
  basePrice       Int?

  // Status
  status          OrderStatus
  rejectionReason String?
  deliveryUrl     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum OrderType {
  product
  custom
}

enum OrderStatus {
  requested
  accepted
  rejected
  paid
  shipping
  delivered
}